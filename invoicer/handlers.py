"""
Miscellaneous signal handlers.
"""

from django.db import models
from django.conf import settings
import os
import shutil

#TODO: import from djangolib, instead
def organize_files_by_pk(sender, instance, created, **kwargs):
    """
    Organizes files defined on the sender (with FileField or ImageField) by
    moving them to a local filesystem path based on the sender primary key;
    existing files with the same path are always overwritten.

    The local filesystem path is computed from the following components:

        * the value of ``MEDIA_ROOT`` setting
        * the sender application label (lowercase)
        * the sender model name (lowercase)
        * the sender primary key
        * the path generated by the `generate_filename` method of the field

    It the model primary key is a OneToOneField, the sender model name
    will be computed from the farthest ancestor.

    This handler can be used when connecting a model to a
    `django.db.models.post_save` signal.

    """
    #TODO: not tested with more than one ancestor
    for field in instance._meta.fields:
        if type(field) in [models.FileField, models.ImageField]:
            instance_field = getattr(instance, field.name)

            try:
                source_path = instance_field.path
            except:
                continue
            """
            try:
                source_path = unicode(instance_field.path, 'utf-8')
            except:
                continue
            """
            module_name = instance._meta.module_name
            parent = sender
            while True:
                if type(parent._meta.pk) == models.fields.related.OneToOneField:
                    parent = instance._meta.pk.related.parent_model
                    module_name = parent._meta.module_name
                else:
                    break
            destination_path = os.path.join(
                settings.MEDIA_ROOT,
                instance._meta.app_label,
                module_name,
                str(instance.pk),
                field.generate_filename(instance_field, source_path)
            )
            if source_path == destination_path:
                continue
            else:
                destination_path_dir = os.path.dirname(destination_path)
                if not os.path.exists(destination_path_dir):
                    os.makedirs(destination_path_dir)

                shutil.copy2(source_path, destination_path)
                """
                source = open(source_path, 'rb')
                dest = open(destination_path, 'wb')
                buffer_size = 1024*1024
                while True:
                    copy_buffer = source.read(buffer_size)
                    if copy_buffer:
                        dest.write(copy_buffer)
                    else:
                        break
                source.close()
                dest.close()
                """
                instance_field.name = destination_path.replace(settings.MEDIA_ROOT + os.path.sep, '')
                instance.save()
                os.remove(source_path)
                os.rmdir(os.path.dirname(source_path))
